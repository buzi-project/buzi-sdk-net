/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: edson@michaque.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Io.Gitlab.Buziproject.V1.Client;
using Io.Gitlab.Buziproject.V1.Api;
// uncomment below to import models
//using Io.Gitlab.Buziproject.V1.Model;

namespace Io.Gitlab.Buziproject.V1.Test.Api
{
    /// <summary>
    ///  Class for testing SmsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SmsApiTests : IDisposable
    {
        private SmsApi instance;

        public SmsApiTests()
        {
            instance = new SmsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SmsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SmsApi
            //Assert.IsType<SmsApi>(instance);
        }

        /// <summary>
        /// Test CancelMessage
        /// </summary>
        [Fact]
        public void CancelMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long messageId = null;
            //var response = instance.CancelMessage(messageId);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test CreateMessage
        /// </summary>
        [Fact]
        public void CreateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateMessageInput createMessageInput = null;
            //var response = instance.CreateMessage(createMessageInput);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test CreatePricing
        /// </summary>
        [Fact]
        public void CreatePricingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int networkId = null;
            //var response = instance.CreatePricing(networkId);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test DeleteMessage
        /// </summary>
        [Fact]
        public void DeleteMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long messageId = null;
            //string apiKey = null;
            //var response = instance.DeleteMessage(messageId, apiKey);
            //Assert.IsType<Error>(response);
        }

        /// <summary>
        /// Test GetMessage
        /// </summary>
        [Fact]
        public void GetMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long messageId = null;
            //var response = instance.GetMessage(messageId);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test GetNetwork
        /// </summary>
        [Fact]
        public void GetNetworkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int networkId = null;
            //long? countryCode = null;
            //var response = instance.GetNetwork(networkId, countryCode);
            //Assert.IsType<Network>(response);
        }

        /// <summary>
        /// Test GetPricing
        /// </summary>
        [Fact]
        public void GetPricingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int networkId = null;
            //var response = instance.GetPricing(networkId);
            //Assert.IsType<List<Pricing>>(response);
        }

        /// <summary>
        /// Test ListMessages
        /// </summary>
        [Fact]
        public void ListMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inbox = null;
            //string status = null;
            //var response = instance.ListMessages(inbox, status);
            //Assert.IsType<List<Message>>(response);
        }

        /// <summary>
        /// Test ListNetworks
        /// </summary>
        [Fact]
        public void ListNetworksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCode = null;
            //var response = instance.ListNetworks(countryCode);
            //Assert.IsType<List<Network>>(response);
        }

        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Fact]
        public void SendMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long messageId = null;
            //var response = instance.SendMessage(messageId);
            //Assert.IsType<Message>(response);
        }
    }
}
