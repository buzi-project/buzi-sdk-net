/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: edson@michaque.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Gitlab.Buziproject.V1.Client;
using Io.Gitlab.Buziproject.V1.Model;

namespace Io.Gitlab.Buziproject.V1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISmsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message CancelMessage(long messageId, int operationIndex = 0);

        /// <summary>
        /// Cancel a message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> CancelMessageWithHttpInfo(long messageId, int operationIndex = 0);
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Update an existing pet by Id
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageInput">Update an existent pet in the store</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message CreateMessage(CreateMessageInput createMessageInput, int operationIndex = 0);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Update an existing pet by Id
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageInput">Update an existent pet in the store</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> CreateMessageWithHttpInfo(CreateMessageInput createMessageInput, int operationIndex = 0);
        /// <summary>
        /// Create network price
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message CreatePricing(int networkId, int operationIndex = 0);

        /// <summary>
        /// Create network price
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> CreatePricingWithHttpInfo(int networkId, int operationIndex = 0);
        /// <summary>
        /// Deletes a message
        /// </summary>
        /// <remarks>
        /// delete a message
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        Error DeleteMessage(long messageId, string apiKey = default(string), int operationIndex = 0);

        /// <summary>
        /// Deletes a message
        /// </summary>
        /// <remarks>
        /// delete a message
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> DeleteMessageWithHttpInfo(long messageId, string apiKey = default(string), int operationIndex = 0);
        /// <summary>
        /// Get message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message GetMessage(long messageId, int operationIndex = 0);

        /// <summary>
        /// Get message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> GetMessageWithHttpInfo(long messageId, int operationIndex = 0);
        /// <summary>
        /// Get network
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Network</returns>
        Network GetNetwork(int networkId, long? countryCode = default(long?), int operationIndex = 0);

        /// <summary>
        /// Get network
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Network</returns>
        ApiResponse<Network> GetNetworkWithHttpInfo(int networkId, long? countryCode = default(long?), int operationIndex = 0);
        /// <summary>
        /// List network rates
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Pricing&gt;</returns>
        List<Pricing> GetPricing(int networkId, int operationIndex = 0);

        /// <summary>
        /// List network rates
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Pricing&gt;</returns>
        ApiResponse<List<Pricing>> GetPricingWithHttpInfo(int networkId, int operationIndex = 0);
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// Update an existing pet by Id
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inbox"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Message&gt;</returns>
        List<Message> ListMessages(string inbox = default(string), string status = default(string), int operationIndex = 0);

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// Update an existing pet by Id
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inbox"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Message&gt;</returns>
        ApiResponse<List<Message>> ListMessagesWithHttpInfo(string inbox = default(string), string status = default(string), int operationIndex = 0);
        /// <summary>
        /// List networks
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Network&gt;</returns>
        List<Network> ListNetworks(string countryCode = default(string), int operationIndex = 0);

        /// <summary>
        /// List networks
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Network&gt;</returns>
        ApiResponse<List<Network>> ListNetworksWithHttpInfo(string countryCode = default(string), int operationIndex = 0);
        /// <summary>
        /// Sends a message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message SendMessage(long messageId, int operationIndex = 0);

        /// <summary>
        /// Sends a message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> SendMessageWithHttpInfo(long messageId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISmsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> CancelMessageAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> CancelMessageWithHttpInfoAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Update an existing pet by Id
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageInput">Update an existent pet in the store</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> CreateMessageAsync(CreateMessageInput createMessageInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Update an existing pet by Id
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageInput">Update an existent pet in the store</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> CreateMessageWithHttpInfoAsync(CreateMessageInput createMessageInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create network price
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> CreatePricingAsync(int networkId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create network price
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> CreatePricingWithHttpInfoAsync(int networkId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a message
        /// </summary>
        /// <remarks>
        /// delete a message
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> DeleteMessageAsync(long messageId, string apiKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a message
        /// </summary>
        /// <remarks>
        /// delete a message
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> DeleteMessageWithHttpInfoAsync(long messageId, string apiKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> GetMessageAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> GetMessageWithHttpInfoAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get network
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Network</returns>
        System.Threading.Tasks.Task<Network> GetNetworkAsync(int networkId, long? countryCode = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get network
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Network)</returns>
        System.Threading.Tasks.Task<ApiResponse<Network>> GetNetworkWithHttpInfoAsync(int networkId, long? countryCode = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List network rates
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Pricing&gt;</returns>
        System.Threading.Tasks.Task<List<Pricing>> GetPricingAsync(int networkId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List network rates
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Pricing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Pricing>>> GetPricingWithHttpInfoAsync(int networkId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// Update an existing pet by Id
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inbox"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Message&gt;</returns>
        System.Threading.Tasks.Task<List<Message>> ListMessagesAsync(string inbox = default(string), string status = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// Update an existing pet by Id
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inbox"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Message&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Message>>> ListMessagesWithHttpInfoAsync(string inbox = default(string), string status = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List networks
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Network&gt;</returns>
        System.Threading.Tasks.Task<List<Network>> ListNetworksAsync(string countryCode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List networks
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Network&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Network>>> ListNetworksWithHttpInfoAsync(string countryCode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sends a message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> SendMessageAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sends a message
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> SendMessageWithHttpInfoAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISmsApi : ISmsApiSync, ISmsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SmsApi : ISmsApi
    {
        private Io.Gitlab.Buziproject.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SmsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SmsApi(string baseUrl)
        {
            this.Configuration = Io.Gitlab.Buziproject.V1.Client.Configuration.MergeConfigurations(
                Io.Gitlab.Buziproject.V1.Client.GlobalConfiguration.Instance,
                new Io.Gitlab.Buziproject.V1.Client.Configuration { BaseUrl = baseUrl }
            );
            this.Client = new Io.Gitlab.Buziproject.V1.Client.ApiClient(this.Configuration.BaseUrl);
            this.AsynchronousClient = new Io.Gitlab.Buziproject.V1.Client.ApiClient(this.Configuration.BaseUrl);
            this.ExceptionFactory = Io.Gitlab.Buziproject.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SmsApi(Io.Gitlab.Buziproject.V1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gitlab.Buziproject.V1.Client.Configuration.MergeConfigurations(
                Io.Gitlab.Buziproject.V1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Gitlab.Buziproject.V1.Client.ApiClient(this.Configuration.BaseUrl);
            this.AsynchronousClient = new Io.Gitlab.Buziproject.V1.Client.ApiClient(this.Configuration.BaseUrl);
            ExceptionFactory = Io.Gitlab.Buziproject.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SmsApi(Io.Gitlab.Buziproject.V1.Client.ISynchronousClient client, Io.Gitlab.Buziproject.V1.Client.IAsynchronousClient asyncClient, Io.Gitlab.Buziproject.V1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gitlab.Buziproject.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Gitlab.Buziproject.V1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Gitlab.Buziproject.V1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBaseUrl()
        {
            return this.Configuration.BaseUrl;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Gitlab.Buziproject.V1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Gitlab.Buziproject.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel a message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message CancelMessage(long messageId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = CancelMessageWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> CancelMessageWithHttpInfo(long messageId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.CancelMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Message>("/v1/sms/messages/{messageId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> CancelMessageAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = await CancelMessageWithHttpInfoAsync(messageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message>> CancelMessageWithHttpInfoAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.CancelMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Message>("/v1/sms/messages/{messageId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Message Update an existing pet by Id
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageInput">Update an existent pet in the store</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message CreateMessage(CreateMessageInput createMessageInput, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = CreateMessageWithHttpInfo(createMessageInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Message Update an existing pet by Id
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageInput">Update an existent pet in the store</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> CreateMessageWithHttpInfo(CreateMessageInput createMessageInput, int operationIndex = 0)
        {
            // verify the required parameter 'createMessageInput' is set
            if (createMessageInput == null)
            {
                throw new Io.Gitlab.Buziproject.V1.Client.ApiException(400, "Missing required parameter 'createMessageInput' when calling SmsApi->CreateMessage");
            }

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMessageInput;

            localVarRequestOptions.Operation = "SmsApi.CreateMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Message>("/v1/sms/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Message Update an existing pet by Id
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageInput">Update an existent pet in the store</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> CreateMessageAsync(CreateMessageInput createMessageInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = await CreateMessageWithHttpInfoAsync(createMessageInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Message Update an existing pet by Id
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageInput">Update an existent pet in the store</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message>> CreateMessageWithHttpInfoAsync(CreateMessageInput createMessageInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createMessageInput' is set
            if (createMessageInput == null)
            {
                throw new Io.Gitlab.Buziproject.V1.Client.ApiException(400, "Missing required parameter 'createMessageInput' when calling SmsApi->CreateMessage");
            }


            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMessageInput;

            localVarRequestOptions.Operation = "SmsApi.CreateMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Message>("/v1/sms/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create network price Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message CreatePricing(int networkId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = CreatePricingWithHttpInfo(networkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create network price Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> CreatePricingWithHttpInfo(int networkId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(networkId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.CreatePricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Message>("/v1/sms/networks/{networkId}/pricing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create network price Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> CreatePricingAsync(int networkId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = await CreatePricingWithHttpInfoAsync(networkId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create network price Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message>> CreatePricingWithHttpInfoAsync(int networkId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(networkId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.CreatePricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Message>("/v1/sms/networks/{networkId}/pricing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a message delete a message
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Error</returns>
        public Error DeleteMessage(long messageId, string apiKey = default(string), int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Error> localVarResponse = DeleteMessageWithHttpInfo(messageId, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a message delete a message
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Error</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<Error> DeleteMessageWithHttpInfo(long messageId, string apiKey = default(string), int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            if (apiKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            }

            localVarRequestOptions.Operation = "SmsApi.DeleteMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Error>("/v1/sms/messages/{messageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a message delete a message
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> DeleteMessageAsync(long messageId, string apiKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Error> localVarResponse = await DeleteMessageWithHttpInfoAsync(messageId, apiKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a message delete a message
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Pet id to delete</param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<Error>> DeleteMessageWithHttpInfoAsync(long messageId, string apiKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            if (apiKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            }

            localVarRequestOptions.Operation = "SmsApi.DeleteMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Error>("/v1/sms/messages/{messageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message GetMessage(long messageId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = GetMessageWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> GetMessageWithHttpInfo(long messageId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.GetMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Message>("/v1/sms/messages/{messageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> GetMessageAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = await GetMessageWithHttpInfoAsync(messageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message>> GetMessageWithHttpInfoAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.GetMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Message>("/v1/sms/messages/{messageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get network Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Network</returns>
        public Network GetNetwork(int networkId, long? countryCode = default(long?), int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Network> localVarResponse = GetNetworkWithHttpInfo(networkId, countryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get network Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Network</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<Network> GetNetworkWithHttpInfo(int networkId, long? countryCode = default(long?), int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            if (countryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToMultiMap("", "country_code", countryCode));
            }

            localVarRequestOptions.Operation = "SmsApi.GetNetwork";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Network>("/v1/sms/networks/{networkId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNetwork", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get network Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Network</returns>
        public async System.Threading.Tasks.Task<Network> GetNetworkAsync(int networkId, long? countryCode = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Network> localVarResponse = await GetNetworkWithHttpInfoAsync(networkId, countryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get network Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Network)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<Network>> GetNetworkWithHttpInfoAsync(int networkId, long? countryCode = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            if (countryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToMultiMap("", "country_code", countryCode));
            }

            localVarRequestOptions.Operation = "SmsApi.GetNetwork";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Network>("/v1/sms/networks/{networkId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNetwork", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List network rates Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Pricing&gt;</returns>
        public List<Pricing> GetPricing(int networkId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Pricing>> localVarResponse = GetPricingWithHttpInfo(networkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List network rates Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Pricing&gt;</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Pricing>> GetPricingWithHttpInfo(int networkId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(networkId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.GetPricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Pricing>>("/v1/sms/networks/{networkId}/pricing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List network rates Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Pricing&gt;</returns>
        public async System.Threading.Tasks.Task<List<Pricing>> GetPricingAsync(int networkId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Pricing>> localVarResponse = await GetPricingWithHttpInfoAsync(networkId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List network rates Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Pricing&gt;)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Pricing>>> GetPricingWithHttpInfoAsync(int networkId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(networkId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.GetPricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Pricing>>("/v1/sms/networks/{networkId}/pricing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List messages Update an existing pet by Id
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inbox"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Message&gt;</returns>
        public List<Message> ListMessages(string inbox = default(string), string status = default(string), int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Message>> localVarResponse = ListMessagesWithHttpInfo(inbox, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List messages Update an existing pet by Id
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inbox"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Message&gt;</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Message>> ListMessagesWithHttpInfo(string inbox = default(string), string status = default(string), int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToMultiMap("", "inbox", inbox));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "SmsApi.ListMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Message>>("/v1/sms/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List messages Update an existing pet by Id
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inbox"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Message&gt;</returns>
        public async System.Threading.Tasks.Task<List<Message>> ListMessagesAsync(string inbox = default(string), string status = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Message>> localVarResponse = await ListMessagesWithHttpInfoAsync(inbox, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List messages Update an existing pet by Id
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inbox"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Message&gt;)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Message>>> ListMessagesWithHttpInfoAsync(string inbox = default(string), string status = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToMultiMap("", "inbox", inbox));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "SmsApi.ListMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Message>>("/v1/sms/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List networks Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Network&gt;</returns>
        public List<Network> ListNetworks(string countryCode = default(string), int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Network>> localVarResponse = ListNetworksWithHttpInfo(countryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List networks Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Network&gt;</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Network>> ListNetworksWithHttpInfo(string countryCode = default(string), int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (countryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToMultiMap("", "country_code", countryCode));
            }

            localVarRequestOptions.Operation = "SmsApi.ListNetworks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Network>>("/v1/sms/networks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNetworks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List networks Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Network&gt;</returns>
        public async System.Threading.Tasks.Task<List<Network>> ListNetworksAsync(string countryCode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Network>> localVarResponse = await ListNetworksWithHttpInfoAsync(countryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List networks Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ID of pet to return (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Network&gt;)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<List<Network>>> ListNetworksWithHttpInfoAsync(string countryCode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (countryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToMultiMap("", "country_code", countryCode));
            }

            localVarRequestOptions.Operation = "SmsApi.ListNetworks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Network>>("/v1/sms/networks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNetworks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends a message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message SendMessage(long messageId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = SendMessageWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends a message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> SendMessageWithHttpInfo(long messageId, int operationIndex = 0)
        {
            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.SendMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Message>("/v1/sms/messages/{messageId}/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends a message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> SendMessageAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message> localVarResponse = await SendMessageWithHttpInfoAsync(messageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends a message Returns a single pet
        /// </summary>
        /// <exception cref="Io.Gitlab.Buziproject.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">ID of pet to return</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Io.Gitlab.Buziproject.V1.Client.ApiResponse<Message>> SendMessageWithHttpInfoAsync(long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Io.Gitlab.Buziproject.V1.Client.RequestOptions localVarRequestOptions = new Io.Gitlab.Buziproject.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Io.Gitlab.Buziproject.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("messageId", Io.Gitlab.Buziproject.V1.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "SmsApi.SendMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Gitlab.Buziproject.V1.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Message>("/v1/sms/messages/{messageId}/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
